import React, {Component} from 'react';
import StatClassifier from '../../utils/StatClassifier';
import Stat from '../../domain/Stat';
import '../boilerplate.css';
import './App.css';
import Mod from "../../domain/Mod";
import characters from "../../constants/characters";
import setBonuses from "../../constants/setbonuses"
import BaseStats from "../../domain/BaseStats";
import Character from "../../domain/Character";
import OptimizerView from "../OptimizerView/OptimizerView";
import ExploreView from "../ExploreView/ExploreView";
import FileInput from "../../components/FileInput/FileInput";
import FileDropZone from "../../components/FileDropZone/FileDropZone";

class App extends Component {
  constructor(props) {
    super(props);
    this.state = {};
    this.state.view = 'explore';
    this.state.mods = [];
  }

  /**
   * File handler to process an input file containing mod data.
   *
   * @param fileInput The uploaded mods file
   */
  readModsFile(fileInput) {
    let reader = new FileReader();

    reader.onload = (event) => {
      this.setState({
        'mods': this.processMods(JSON.parse(event.target.result))
      });
    };

    reader.readAsText(fileInput);
  }

  /**
   * Given the input from a file exported from the Mods Manager Importer, read mods into memory in the format
   * used by this application
   *
   * @param fileInput array The parsed contents of the file generated by the Mods Manager Importer
   */
  processMods(fileInput) {
    let mods = [];

    for (let fileMod of fileInput) {
      const primaryStat = new Stat(fileMod.primaryBonusType, fileMod.primaryBonusValue);
      let secondaryStats = [];

      if ('' !== fileMod.secondaryValue_1) {
        secondaryStats.push(new Stat(fileMod.secondaryType_1, fileMod.secondaryValue_1));
      }
      if ('' !== fileMod.secondaryValue_2) {
        secondaryStats.push(new Stat(fileMod.secondaryType_2, fileMod.secondaryValue_2));
      }
      if ('' !== fileMod.secondaryValue_3) {
        secondaryStats.push(new Stat(fileMod.secondaryType_3, fileMod.secondaryValue_3));
      }
      if ('' !== fileMod.secondaryValue_4) {
        secondaryStats.push(new Stat(fileMod.secondaryType_4, fileMod.secondaryValue_4));
      }

      mods.push(new Mod(
        fileMod.mod_uid,
        fileMod.slot,
        setBonuses[fileMod.set],
        fileMod.level,
        fileMod.pips,
        primaryStat,
        secondaryStats,
        characters[fileMod.characterName.replace(/&amp;#39;/g, "'")] ||
          new Character(fileMod.characterName, new BaseStats())
      ));
    }

    const statClassifier = new StatClassifier(this.calculateStatCategoryRanges(mods));
    for (let mod of mods) {
      mod.classifyStats(statClassifier);
    }

    return mods;
  }

  /**
   * For each type of secondary stat on a mod, calculate the minimum and maximum values found
   *
   * @param mods array
   * @returns object An object with a property for each secondary stat type, with values of "min" and "max"
   */
  calculateStatCategoryRanges(mods) {
    let allStats = [];
    let statGroups = {};
    let statRanges = {};

    // Collect all stat values on all mods
    for (let mod of mods) {
      allStats = allStats.concat(mod.secondaryStats);
    }

    // Group the stat values by the stat type
    for (let stat of allStats) {
      if ('undefined' !== typeof statGroups[stat.type]) {
        statGroups[stat.type].push(stat.value);
      } else {
        statGroups[stat.type] = [stat.value];
      }
    }

    // Find the minimum and maximum of each stat type
    for (let type in statGroups) {
      statRanges[type] = statGroups[type].reduce(
        (minMax, statValue) => {
          if (statValue < minMax.min) {
            minMax.min = statValue;
          }
          if (statValue > minMax.max) {
            minMax.max = statValue;
          }
          return minMax;
        },
        {'min': Infinity, 'max': 0}
      );
    }

    return statRanges;
  }

  render() {
    if (this.state.mods.length > 0) {
      return (
        <div className={'App'}>
          <header className={'App-header'}>
            <h1 className={'App-title'}>Grandivory's Mod Optimizer for Star Wars: Galaxy of Heroes™</h1>
            <nav>
              <button className={'explore' === this.state.view ? 'active' : ''}
                      onClick={this.showPage.bind(this, 'explore')}>Explore my mods</button>
              <button className={'optimize' === this.state.view ? 'active' : ''}
                      onClick={this.showPage.bind(this, 'optimize')}>Optimize my mods</button>
            </nav>
            <div className={'actions'}>
              <FileInput label={'Upload my mods!'} handler={this.readModsFile.bind(this)}/>
            </div>
          </header>
          <div className={'app-body'}>
            {'explore' === this.state.view &&
            <ExploreView mods={this.state.mods} />
            }
            {'optimize' === this.state.view &&
            <OptimizerView mods={this.state.mods}/>
            }
          </div>
          <footer className={'App-footer'}>
            Star Wars: Galaxy of Heroes™ is owned by EA and Capital Games. This site is not affiliated with them.
          </footer>
        </div>
      );
    } else {
      return (
        <div className={'App'}>
          <header className={'App-header'}>
            <h1 className={'App-title'}>Grandivory's Mod Optimizer for Star Wars: Galaxy of Heroes™</h1>
            <div className={'actions'}>
              <FileInput label={'Upload my mods!'} handler={this.readModsFile.bind(this)}/>
            </div>
          </header>
          <div className={'app-body'}>
            <div className={'welcome'}>
              <h2>Welcome to the mod optimizer for Star Wars: Galaxy of Heroes™!</h2>
              <p>
                This application will allow you to equip the optimum mod set on every character you have by assigning
                a value to each stat that a mod can confer. You'll give it a list of characters to optimize for along
                with the stats that you're looking for, and it will determine the best mods to equip, one character at a
                time, until your list is exhausted.
              </p>
              <p>
                To get started, copy the google sheet <a className={'call-out'}
                href="https://docs.google.com/spreadsheets/d/1aba4x-lzrrt7lrBRKc1hNr5GoK5lFNcGWQZbRlU4H18/copy">here</a>
                , courtesy of <a href="http://apps.crouchingrancor.com">Crouching Rancor</a>.
                It will allow you to export your mods from <a href="https://swgoh.gg">SWGOH.gg</a> in order to import
                them into this tool. When you're ready, you can click the button above, or drag your mods file into the
                box below.
              </p>
              <FileDropZone handler={this.readModsFile.bind(this)} label={'Drop your mods file here!'} />
            </div>
          </div>
          <footer className={'App-footer'}>
            Star Wars: Galaxy of Heroes™ is owned by EA and Capital Games. This site is not affiliated with them.
          </footer>
        </div>
      );
    }

  }

  /**
   * Update the view to show a particular page.
   *
   * @param pageName string The page to show
   */
  showPage(pageName) {
    this.setState({'view': pageName});
  }
}

export default App;
